pipeline {
    agent {
        label 'k8s-agent'
    }
    environment {
        FRONTEND_IMAGE_NAME='project-frontend-k8s'
        FRONTEND_IMAGE_TAG="v1.${BUILD_NUMBER}"
        BACKEND_IMAGE_NAME='project-backend-k8s'
        BACKEND_IMAGE_TAG="v1.${BUILD_NUMBER}"
        CONTAINER_NAME_FRONTEND='frontend'
        CONTAINER_NAME_BACKEND='project-backend-k8s'
        REGISTRY='DockerHub'
        ACCOUNT_NAME='itsikweiss1020'
        NEW_FRONTEND_NAME=''
        NEW_BACKEND_NAME=''
        DOCKERHUB_CREDENTIALS = credentials('DockerCred')
    }
    stages {
        stage('clone') {
            steps {
                sh 'pwd'
            }
        }
        stage('build backend') {
            steps {
                sh 'pwd'
                sh 'docker ps'
                sh 'pwd'
                dir('DevSecOps14FinalProject'){
                    sh 'docker build -t ${ACCOUNT_NAME}/${CONTAINER_NAME_BACKEND}:latest -f Dockerfile .'
                }
            }
        }
        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DockerCred', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh 'echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin'
                }
            }
        }
        stage('push backend') {
            steps {
                script {
                    sh 'pwd'
                    sh 'docker images'
                    dir('DevSecOps14'){
                        def pushResult = sh(script: "docker push ${ACCOUNT_NAME}/${CONTAINER_NAME_BACKEND}:latest", returnStatus: true)
                        if (pushResult != 0) {
                            error "Docker push failed"
                        } else {
                            echo "Docker image pushed successfully"
                        }
                    }
                }
            }
        }
        stage('Deploy Backend') {
            steps {
                script {
                    dir('k8s'){
                        sh 'kubectl apply -f backend-deployment.yaml'
                        sh 'kubectl apply -f backend-service.yaml'
                    }
                }
           }
       }
       stage('Get Backend IP') {
           steps {
               script {
                   echo 'Getting Backend IP...'
                   BACKEND_IP = sh(script: "kubectl get service backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()
                   writeFile file: 'backend_ip.txt', text: BACKEND_IP
                   echo "Backend IP is ${BACKEND_IP}"
               }
           }
       }
       stage('Create ConfigMap') {
           steps {
               script {
                   echo 'Creating ConfigMap...'
                   sh """
                   kubectl create configmap frontend-config --from-literal=.env="REACT_APP_BACKEND_URL=http://${BACK
